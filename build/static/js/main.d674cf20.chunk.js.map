{"version":3,"sources":["components/List.js","containers/ListContainer.js","components/AirportMap.js","components/Detail.js","containers/DetailContainer.js","containers/AirportContainer.js","api/getAirports.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","styled","div","List","airportName","airportCode","cityName","countryName","region","url","replace","toLowerCase","key","className","aria-label","regionName","to","ListContainer","content","useState","resultLimit","setResults","localStorage","getItem","value","setValue","useEffect","setItem","window","onscroll","ev","innerHeight","scrollY","document","body","offsetHeight","type","onChange","event","target","placeholder","data","renderResults","results","slice","map","item","domestic","domesticAirport","international","internationalAirport","city","cityCode","country","countryCode","location","GoogleApiWrapper","apiKey","google","lat","long","zoom","initialCenter","lng","style","margin","height","Detail","etickets","latitude","longitude","yesNo","DetailContainer","scrollTo","eticketableAirport","AppContainer","airports","setAirports","loading","setLoading","hasError","setHasError","fetch","then","res","json","catch","console","log","errorMessage","nonSuccess","color","width","exact","path","render","props","i","Header","src","alt","title","AppWrapper","App","AirportContainer","Boolean","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d674cf20.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport { Link } from 'react-router-dom'\n\nconst Wrapper = styled.div`\n    display: flex;\n    flext-direction: row;\n    padding: 0 0 0 0.875rem;\n        @media screen and (min-width: 600px) {\n            padding: 0 0 0 1.875rem;\n        }\n    justify-content: center;\n    max-width: 56.5rem;\n    margin: .875rem auto;\n    border: 1px solid #e5e5e5;\n    border-radius: .1875rem;\n    box-shadow: 0 0.125rem 0.125rem 0 rgba(0,0,0,0.1);\n    background: #fff;\n    .content {\n        \n        &__left{\n            justify-content: flex-start;\n            text-align: left;\n            width: 70%;\n            border-right: 1px solid #e5e5e5;\n            padding-right: 0.875rem;\n        }\n        &__right{\n            justify-content: center;\n            width: 30%;\n            margin: auto;\n            padding: 0 0.35rem;\n            .link {\n                color: #e40000;\n                text-decoration: none;\n                font-weight: bold;\n                text-transform: uppercase;\n                font-size: 1rem;\n                letter-spacing: .08125rem;\n            }\n        }   \n    }\n`;\n\nconst List = ({\n    airportName,\n    airportCode,\n    cityName,\n    countryName,\n    region,\n}) => {\n    const url = airportCode.replace(/\\s/g, '-').replace(/[()]/g, '').toLowerCase()\n    return(\n        <Wrapper key={airportName}>\n            <div className='content__left'>\n                <div key={airportName}>\n                    <h3 aria-label={airportName}>{airportCode} - {airportName}</h3>\n                    <p aria-label={cityName}>{cityName}, {countryName}, {region.regionName}</p>\n                </div>\n            </div>\n            <div className='content__right'>\n                <div key={airportName}>\n                    <p aria-label='View Details'>\n                        <Link to={url} className='link'>View Details</Link>\n                    </p>\n                </div>\n            </div>\n        </Wrapper>  \n    );\n}\n\nexport default List;","import React, {useState, useEffect} from 'react';\nimport styled from 'styled-components';\nimport SearchResults from 'react-filter-search';\n\nimport List from '../components/List'\n\nconst Wrapper = styled.div`\n    position: relative;\n    top: 18.5vh;\n`;\n\nconst ListContainer = ({content}) => {\n    const [resultLimit, setResults] = useState(50)\n    const [value, setValue] = useState(\n        localStorage.getItem('searchValue') || ''\n    )\n    useEffect(() => {\n        localStorage.setItem('searchValue', value)\n    }, [value]);\n    const handleChange = event => {\n        const {value} = event.target\n        setValue(value)\n    }\n    window.onscroll = (ev) => {\n        if ((window.innerHeight + window.scrollY) >= document.body.offsetHeight) {\n            setResults(resultLimit + 50)\n        }\n    };\n    return(\n        <>\n            <div className='search'>\n                <input type=\"text\" value={value} onChange={handleChange} placeholder='Search airports...'/>\n            </div>\n            <SearchResults\n                value={value}\n                data={content}\n                renderResults={results => (\n                    <Wrapper>\n                    {results.slice(0, resultLimit).map(item => (\n                        <List \n                            airportCode={item.airportCode}\n                            airportName={item.airportName}\n                            domestic={item.domesticAirport}\n                            international={item.internationalAirport}\n                            cityName={item.city.cityName}\n                            cityCode={item.city.cityCode}\n                            countryName={item.country.countryName}\n                            countryCode={item.country.countryCode}\n                            location={item.location}\n                            region={item.region}\n                            key={item.airportCode}\n                        />\n                    ))}\n                    </Wrapper>\n                )}\n            />\n        \n        </>\n    )\n}\n\nexport default ListContainer;","import React from 'react';\nimport styled from 'styled-components';\nimport {Map, GoogleApiWrapper} from 'google-maps-react'\n\nconst Wrapper = styled.div`\n`;\n\nconst AirportMap = ({\n        google,\n        lat,\n        long,\n    }) => {\n    return (\n        <Wrapper>\n            <Map \n                google={google}\n                zoom={8}\n                initialCenter={{\n                    lat: lat,\n                    lng: long\n                }}\n                style={{\n                    margin: '1.75rem 0 0 0',\n                    height: '600px',\n                }}>\n            </Map>\n        </Wrapper>\n    );\n}\n\n\nexport default GoogleApiWrapper({\n    apiKey: ('AIzaSyCksyb1zfYmQHK-Zb69o1Hw0YWbKpPHXbU')\n})(AirportMap);","import React from 'react';\nimport styled from 'styled-components';\nimport AirportMap from './AirportMap'\nimport { Link } from 'react-router-dom';\n\nconst Wrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    margin: auto;\n    .main {\n        opacity: 1;\n        animation-name: fadeInOpacity;\n        animation-iteration-count: 1;\n        animation-timing-function: ease-in;\n        animation-duration: 1s;\n        max-width: 56.5rem;\n        margin: 0 auto;\n        text-align: left;\n        padding: 0 1rem;\n        @media screen and (min-width: 600px) {\n            text-align: center;\n        }\n        .left{\n            text-align: left;\n        }\n    }\n    .link {\n        color: #e40000;\n        text-decoration: none;\n        font-weight: bold;\n        text-transform: uppercase;\n        font-size: 1rem;\n        letter-spacing: .08125rem;\n    }\n    h2 {\n        padding: 20px 0 0 0;\n    }\n    @keyframes fadeInOpacity {\n        0% {\n            opacity: 0;\n        }\n        100% {\n            opacity: 1;\n        }\n    }\n`;\n\nconst Detail = ({\n    airportName,\n    airportCode,\n    cityName,\n    countryName,\n    region,\n    location,\n    international,\n    domestic,\n    etickets,\n}) => {\n    const latitude = location.latitude\n    const longitude = location.longitude\n    const yesNo = international || domestic || etickets ? 'Yes' : 'No'\n    return(\n        <Wrapper key={airportName}>\n            <div className='main'>\n                <div key={airportName}>\n                    <h2 aria-label={airportName}>{airportCode} - {airportName}</h2>\n                    <p aria-label={cityName}>{cityName}, {countryName}, {region.regionName}</p>\n                    <div className='left'>\n                        <p aria-label='International'><b>International:</b> {yesNo}</p>\n                        <p aria-label='Domestic'><b>Domestic:</b> {yesNo}</p>\n                        <p aria-label='e-tickets available'><b>E-tickets available:</b> {yesNo}</p>\n                        <p aria-label='Abour'><b>About:</b> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.</p>\n                    </div>\n                </div>\n                <p aria-label='View Details'><Link to='/' className='link'>>Back</Link></p>\n            </div>\n            <AirportMap\n                lat={latitude}\n                long={longitude}\n            />\n        </Wrapper>  \n    );\n}\n\nexport default Detail","import React, {useEffect} from 'react';\nimport styled from 'styled-components';\n\nimport Detail from '../components/Detail'\n\nconst Wrapper = styled.div`\n    position: relative;\n    top: 11vh;\n`;\n\nconst DetailContainer = ({content}) => {\n    useEffect(() => {\n        window.scrollTo(0, 0)\n    }, [])\n    return(\n        <>\n            <Wrapper>\n                <Detail \n                    airportCode={content.airportCode}\n                    airportName={content.airportName}\n                    domestic={content.domesticAirport}\n                    international={content.internationalAirport}\n                    cityName={content.city.cityName}\n                    cityCode={content.city.cityCode}\n                    countryName={content.country.countryName}\n                    countryCode={content.country.countryCode}\n                    location={content.location}\n                    region={content.region}\n                    etickets={content.eticketableAirport}\n                />\n            </Wrapper> \n        </>\n    );\n}\n\nexport default DetailContainer;","import React, {useState, useEffect} from 'react';\nimport styled from 'styled-components';\nimport { Switch, Route } from 'react-router-dom';\nimport Loader from 'react-loader-spinner'\n\nimport ListContainer from '../containers/ListContainer';\nimport DetailContainer from '../containers/DetailContainer';\nimport { getAirports } from '../api/getAirports';\n\nconst Wrapper = styled.div`\n  color: #323232;\n    .loader {\n      position: absolute;\n      top: 50%;\n      left: 50%;\n      margin-top: -25px;\n      margin-left: -25px;\n    }\n`;\n\nconst AppContainer = () => {\n  const [airports, setAirports] = useState([])\n  const [loading, setLoading] = useState(true)\n  const [hasError, setHasError] = useState(false)\n  useEffect(() => {\n    getAirports().then(res => res.json())\n    .then((data) => {\n      setAirports(data)\n      setLoading(false)\n    })\n    .catch(() => {\n      setHasError(true)\n      console.log('ERROR: Unsuccessful API call...')\n    })\n  }, [])\n  const errorMessage = hasError ? <p aria-label='loading'>Oops something went wrong...</p> : ''\n  const nonSuccess = loading ? <div className='loader'><Loader type=\"Oval\" color=\"#e40000\" height={50} width={50} /></div> : errorMessage\n  return (\n    <>\n    <Wrapper>\n        {\n        loading ? nonSuccess\n        : \n            <Switch>\n                <Route exact path='/' render={props => \n                (<ListContainer {...props} content={airports}/>)\n                }/>\n                { airports.map((item, i)=>{\n                  const url = item.airportCode.replace(/\\s/g, '-').replace(/[()]/g, '').toLowerCase()\n                  return <Route key={i} path={`/${url}`} render={props => (<DetailContainer {...props} content={item}/>)}/>\n                })}\n            </Switch>\n        }\n    </Wrapper>\n    </>\n  );\n}\n\nexport default AppContainer;","export const getAirports = () => {\n    return fetch('https://api.qantas.com/flight/refData/airport')\n}\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst Wrapper = styled.div`\n    .logo {\n        background: url('../img/qantas-logo.png');\n        width:100px;\n        height: 100px;\n    }\n`;\n\nconst Header = () => {\n\n    return(\n        <Wrapper>\n            <header className='App-header'>\n                <img src=\"https://www.qantas.com/content/dam/qantas/centenary/QANTAS-Centenary-40px.png\" alt='Qantas' title='Qantas'/>\n            </header>\n        </Wrapper>\n    );\n}\n\nexport default Header","  \nimport React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport './App.css';\nimport styled from 'styled-components'\n\nimport AirportContainer from \"./containers/AirportContainer\";\nimport Header from \"./components/Header\";\n\nconst AppWrapper = styled.div`\n  text-align: center;\n`\nconst App = () => (\n    <>\n    <Router>\n      <AppWrapper>\n        <Header />\n        <AirportContainer />\n      </AppWrapper>\n    </Router>\n    </>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}